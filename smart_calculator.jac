import:py os;

# Real Gemini LLM function for calculation explanations
def explain_calculation(operation: str, num1: float, num2: float, result: float) -> str by llm(model="gemini/gemini-2.0-flash-exp", temperature=0.7);

with entry {
    # Check for real API key and MTLLM
    api_key = os.getenv("GOOGLE_API_KEY") or "";
    
    mtllm_available = False;
    try {
        import:py mtllm;
        mtllm_available = True;
    } catch {
        mtllm_available = False;
    }
    
    ai_ready = bool(api_key and mtllm_available);
    
    if ai_ready {
        print("üßÆ === REAL Gemini AI Calculator ===");
        print("ü§ñ Gemini-2.0-Flash Connected!");
        print("üí° Real LLM explanations active");
    } else {
        print("üßÆ === Calculator (AI Setup Needed) ===");
        if not mtllm_available {
            print("‚ùå Missing: pip install mtllm");
        }
        if not api_key {
            print("‚ùå Missing: GOOGLE_API_KEY environment variable");
        }
        print("üí° Fallback mode: Basic explanations");
    }
    print("============================================");
    
    smart_mode = False;
    
    while True {
        status = "ü§ñReal AI" if ai_ready else "üìöFallback";
        if smart_mode {
            print(f"\nMode: üß† Smart ({status} explanations ON)");
        } else {
            print("\nMode: üìä Basic (calculations only)");
        }
        
        print("Commands: 'smart', 'setup', 'test', 'q'");
        user_input = input("Enter calculation > ");
        
        if user_input == 'q' {
            print("Thanks for using Gemini Calculator! üöÄ");
            break;
        } elif user_input == 'smart' {
            smart_mode = not smart_mode;
            mode_text = "ON" if smart_mode else "OFF";
            print(f"‚úÖ Smart mode {mode_text}");
            continue;
        } elif user_input == 'setup' {
            print("\nüöÄ === Real Gemini Setup ===");
            print("1. Install MTLLM:");
            print("   pip install mtllm");
            print("\n2. Get API key:");
            print("   https://makersuite.google.com/app/apikey");
            print("\n3. Set environment variable:");
            print("   PowerShell: $env:GOOGLE_API_KEY=your-key");
            print("   CMD: set GOOGLE_API_KEY=your-key");
            print("   Linux/Mac: export GOOGLE_API_KEY=your-key");
            print("\n4. Restart terminal and run again");
            print("===============================");
            continue;
        } elif user_input == 'test' {
            if ai_ready {
                print("\nüß™ Testing Gemini Flash Model...");
                try {
                    test_explanation = explain_calculation("addition", 5.0, 3.0, 8.0);
                    print(f"‚úÖ Gemini Response: {test_explanation}");
                } except Exception as e {
                    print(f"‚ùå Gemini Error: {e}");
                    print("üí° Check your API key and internet connection");
                }
            } else {
                print("‚ùå AI not ready. Run 'setup' command for instructions.");
            }
            continue;
        }
        
        # Parse calculation
        parts = user_input.split();
        
        if len(parts) != 3 {
            print("‚ùå Format: number operator number (e.g., '5 + 3')");
            continue;
        }
        
        # Calculate
        try {
            num1 = float(parts[0]);
            operator = parts[1];
            num2 = float(parts[2]);
            
            if operator == "+" {
                result = num1 + num2;
                print(f"‚úÖ {num1} + {num2} = {result}");
                if smart_mode {
                    if ai_ready {
                        try {
                            explanation = explain_calculation("addition", num1, num2, result);
                            print(f"ü§ñ Gemini: {explanation}");
                        } except Exception as e {
                            print(f"ü§ñ Fallback: Adding {num1} and {num2} combines quantities to get {result}");
                            print(f"‚ö†Ô∏è AI Error: {e}");
                        }
                    } else {
                        print(f"ü§ñ Fallback: Adding {num1} and {num2} combines quantities to get {result}");
                    }
                }
            } elif operator == "-" {
                result = num1 - num2;
                print(f"‚úÖ {num1} - {num2} = {result}");
                if smart_mode {
                    if ai_ready {
                        try {
                            explanation = explain_calculation("subtraction", num1, num2, result);
                            print(f"ü§ñ Gemini: {explanation}");
                        } except Exception as e {
                            print(f"ü§ñ Fallback: Subtracting {num2} from {num1} gives {result}");
                            print(f"‚ö†Ô∏è AI Error: {e}");
                        }
                    } else {
                        print(f"ü§ñ Fallback: Subtracting {num2} from {num1} gives {result}");
                    }
                }
            } elif operator == "*" {
                result = num1 * num2;
                print(f"‚úÖ {num1} * {num2} = {result}");
                if smart_mode {
                    if ai_ready {
                        try {
                            explanation = explain_calculation("multiplication", num1, num2, result);
                            print(f"ü§ñ Gemini: {explanation}");
                        } except Exception as e {
                            print(f"ü§ñ Fallback: Multiplying {num1} by {num2} scales to {result}");
                            print(f"‚ö†Ô∏è AI Error: {e}");
                        }
                    } else {
                        print(f"ü§ñ Fallback: Multiplying {num1} by {num2} scales to {result}");
                    }
                }
            } elif operator == "/" {
                if num2 == 0 {
                    print("‚ùå Error: Division by zero is undefined!");
                    continue;
                }
                result = num1 / num2;
                print(f"‚úÖ {num1} / {num2} = {result}");
                if smart_mode {
                    if ai_ready {
                        try {
                            explanation = explain_calculation("division", num1, num2, result);
                            print(f"ü§ñ Gemini: {explanation}");
                        } except Exception as e {
                            print(f"ü§ñ Fallback: Dividing {num1} by {num2} gives {result}");
                            print(f"‚ö†Ô∏è AI Error: {e}");
                        }
                    } else {
                        print(f"ü§ñ Fallback: Dividing {num1} by {num2} gives {result}");
                    }
                }
            } else {
                print(f"‚ùå Unknown operator '{operator}'. Use: +, -, *, /");
                continue;
            }
            
        } except ValueError {
            print("‚ùå Please enter valid numbers!");
        }
    }
}
